__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _resolveAssetSource = _require(_dependencyMap[3]);

  var _resolveAssetSource2 = babelHelpers.interopRequireDefault(_resolveAssetSource);

  var _decorateMapComponent = _require(_dependencyMap[4]);

  var _decorateMapComponent2 = babelHelpers.interopRequireDefault(_decorateMapComponent);

  var viewConfig = {
    uiViewClassName: 'AIR<provider>MapMarker',
    validAttributes: {
      coordinate: true
    }
  };
  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var propTypes = babelHelpers.extends({}, viewPropTypes, {
    identifier: _propTypes2.default.string,
    reuseIdentifier: _propTypes2.default.string,
    title: _propTypes2.default.string,
    description: _propTypes2.default.string,
    image: _propTypes2.default.any,
    opacity: _propTypes2.default.number,
    pinColor: _propTypes2.default.string,
    coordinate: _propTypes2.default.shape({
      latitude: _propTypes2.default.number.isRequired,
      longitude: _propTypes2.default.number.isRequired
    }).isRequired,
    centerOffset: _propTypes2.default.shape({
      x: _propTypes2.default.number.isRequired,
      y: _propTypes2.default.number.isRequired
    }),
    calloutOffset: _propTypes2.default.shape({
      x: _propTypes2.default.number.isRequired,
      y: _propTypes2.default.number.isRequired
    }),
    anchor: _propTypes2.default.shape({
      x: _propTypes2.default.number.isRequired,
      y: _propTypes2.default.number.isRequired
    }),
    calloutAnchor: _propTypes2.default.shape({
      x: _propTypes2.default.number.isRequired,
      y: _propTypes2.default.number.isRequired
    }),
    flat: _propTypes2.default.bool,
    draggable: _propTypes2.default.bool,
    tracksViewChanges: _propTypes2.default.bool,
    tracksInfoWindowChanges: _propTypes2.default.bool,
    onPress: _propTypes2.default.func,
    onSelect: _propTypes2.default.func,
    onDeselect: _propTypes2.default.func,
    onCalloutPress: _propTypes2.default.func,
    onDragStart: _propTypes2.default.func,
    onDrag: _propTypes2.default.func,
    onDragEnd: _propTypes2.default.func
  });
  var defaultProps = {
    onPress: function onPress() {}
  };

  var MapMarker = function (_React$Component) {
    babelHelpers.inherits(MapMarker, _React$Component);

    function MapMarker(props) {
      babelHelpers.classCallCheck(this, MapMarker);

      var _this = babelHelpers.possibleConstructorReturn(this, (MapMarker.__proto__ || Object.getPrototypeOf(MapMarker)).call(this, props));

      _this.showCallout = _this.showCallout.bind(_this);
      _this.hideCallout = _this.hideCallout.bind(_this);
      _this.animateMarkerToCoordinate = _this.animateMarkerToCoordinate.bind(_this);
      return _this;
    }

    babelHelpers.createClass(MapMarker, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        this.marker.setNativeProps(props);
      }
    }, {
      key: "showCallout",
      value: function showCallout() {
        this._runCommand('showCallout', []);
      }
    }, {
      key: "hideCallout",
      value: function hideCallout() {
        this._runCommand('hideCallout', []);
      }
    }, {
      key: "animateMarkerToCoordinate",
      value: function animateMarkerToCoordinate(coordinate, duration) {
        this._runCommand('animateMarkerToCoordinate', [coordinate, duration || 500]);
      }
    }, {
      key: "_getHandle",
      value: function _getHandle() {
        return (0, _reactNative.findNodeHandle)(this.marker);
      }
    }, {
      key: "_runCommand",
      value: function _runCommand(name, args) {
        switch ("android") {
          case 'android':
            _reactNative.NativeModules.UIManager.dispatchViewManagerCommand(this._getHandle(), this.getUIManagerCommand(name), args);

            break;

          case 'ios':
            this.getMapManagerCommand(name).apply(undefined, [this._getHandle()].concat(babelHelpers.toConsumableArray(args)));
            break;

          default:
            break;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var image = void 0;

        if (this.props.image) {
          image = (0, _resolveAssetSource2.default)(this.props.image) || {};
          image = image.uri || this.props.image;
        }

        var AIRMapMarker = this.getAirComponent();
        return _react2.default.createElement(AIRMapMarker, babelHelpers.extends({
          ref: function ref(_ref) {
            _this2.marker = _ref;
          }
        }, this.props, {
          image: image,
          style: [styles.marker, this.props.style]
        }));
      }
    }]);
    return MapMarker;
  }(_react2.default.Component);

  MapMarker.propTypes = propTypes;
  MapMarker.defaultProps = defaultProps;
  MapMarker.viewConfig = viewConfig;

  var styles = _reactNative.StyleSheet.create({
    marker: {
      position: 'absolute',
      backgroundColor: 'transparent'
    }
  });

  MapMarker.Animated = _reactNative.Animated.createAnimatedComponent(MapMarker);
  exports.default = (0, _decorateMapComponent2.default)(MapMarker, {
    componentType: 'Marker',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });
});